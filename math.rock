(Factorial: n!)
Factorial takes the number
Put 0 into the zero
If the number is the zero
Give back 1

If the number is less than the zero
Give back -1


Put 1 into the iterator
Put 1 into the answer
While the iterator is as little as the number
Put the iterator of the answer into the answer
Build the iterator up

Give back the answer


(Abs value)
Absolute Value takes The number
If The number is less than 0
Put The number times -1 into The number
Give back The number

Give back The number

(Exp Estimate: estimate e^x, x close to 1)
Exp Estimate takes The x and The Number Of Terms
Put 0 into The Iterator
Put 0 into The Answer
While The Iterator is as little as The Number Of Terms
Put Factorial taking The Iterator into the bottom
Put The x over the bottom into The Term
Put The Answer plus The Term into The Answer
Build The Iterator up

Give back The Answer

(Create variable: e)
Put 1 into the x
Put 50 into the terms
Put Exp Estimate taking the x, the terms into the e


(Mod: a % m)
Mod takes the number and the modulo
If the number is greater than 0
While the number is as great as the modulo
Put the number minus the modulo into the number

Give back the number

If the number is less than 0
While the number is less than 0
Put the number plus the modulo into the number

Give back the number

Give back the number


(Floor)
Floor takes the number
Put the number minus Mod taking the number, 1 into the number
Give back the number


(Ceil)
Ceil takes the number
Put -1 times the number into the number
Put -1 times Floor taking the number into the number
Give back the number


(Power: a^x)
Power takes the number and the exponent
If the exponent is 0
Give back 1

Put 1 into the iterator
Put the number into the answer
While the iterator is smaller than the exponent  (Probably can also use divide and conquer exponentiation -> e^n + e^m + ....)
Put the number times the answer into the answer
Build the iterator up

Give back the answer


Exp takes the x
Give back Power taking the e, the x


(Natural Logarithm, always base e)
LN takes the number
Put the number minus 1 into the top
Put the number plus 1 into the bottom
Put the top over the bottom into the x
Put 1 into the iterator
Put 0 into the sum
While the iterator is less than 2000
Put Power taking the x, the iterator into the term
Put the term over the iterator into the term
Put the sum plus the term into the sum
Build the iterator up
Build the iterator up

Put the sum times 2 into the sum
Give back the sum

(Log with number and base)
LOG takes the number and the base
Put LN taking the number into the top
Put LN taking the base into the bottom
Give back the top over the bottom

(Square Root Function)
Square Root takes the number
Put 0.5 times the number into the approximation
Put 1 into the iterator
Put 1.0 times the number into the number
While the iterator is less than 50
Put the number over the approximation plus the approximation into the term
Put 0.5 times the term into the approximation
Build the iterator up

Give back the approximation


(Sine)
Sine takes the radian
Put 1 into the iterator
Put 0 into the answer
Put 1 into the sign
While the iterator is less than 26
Put Power taking the radian, the iterator over Factorial taking the iterator into the term
Put the term times the sign into the term
Put the answer plus the term into the answer
Build the iterator up
Build the iterator up
Put the sign times -1 into the sign

Give back the answer


(Cos)
Cos takes the radian
Put 0 into the iterator
Put 0 into the answer
Put 1 into the sign
While the iterator is less than 26
Put Power taking the radian, the iterator over Factorial taking the iterator into the term
Put the term times the sign into the term
Put the answer plus the term into the answer
Build the iterator up
Build the iterator up
Put the sign times -1 into the sign

Give back the answer


(TanCoeff, auxiliary function)
TanCoeff takes the number
If the number is 0
Give back 1

Put 0 into the answer
Put 0 into the iterator
Put the number over 2 into the halfofnumber
Put Floor taking the halfofnumber into the halfofnumber
While the iterator is less than the halfofnumber minus 1
Put TanCoeff taking the iterator into the firstterm
Put the number minus the iterator minus 1 into the antiiterator
Put TanCoeff taking the antiiterator into the secondterm
Put 2 times the firstterm times the secondterm into the term
Put the answer plus the term into the answer
Build the iterator up

If Mod taking the number, 2 is 1
Put TanCoeff taking the halfofnumber into the term
Put the answer plus Power taking the term, 2 into the answer

Give back the answer


(Tan)
Tan takes the radian
Put 0 into the iterator
Put 0 into the answer
While the iterator is less than 26
Put Tan_Coeff taking the iterator into the coefficient
Put 2 times the iterator into the exponent
Put 1 plus the exponent into the exponent
Put the coefficient times Power taking the radian, the exponent into the term
Put the answer plus the term into the answer
Build the iterator up

Give back the answer


(Get binary from decimal)
DecToBin takes the number
If the number is as little as 1
If the number is 0
Give back "0"

Give back "1"

Put Mod taking the number, 2 into the temp
If the temp is 0
Put "0" into the temp
Else
Put "1" into the temp

Put the number over 2 into the number
Give back the temp plus DecToBin taking the number  (doesn't work until we have integer division)
